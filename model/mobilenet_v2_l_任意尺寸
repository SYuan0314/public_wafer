{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":20170,"status":"ok","timestamp":1754272060085,"user":{"displayName":"Yuan","userId":"17899166706048601251"},"user_tz":-480},"id":"0jLDirqBwIy6","outputId":"a61989d5-a154-44a2-f62a-d99c8ff3ea58"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":17489,"status":"ok","timestamp":1754272077572,"user":{"displayName":"Yuan","userId":"17899166706048601251"},"user_tz":-480},"id":"SyVK17WouLg8","outputId":"e3709fb8-7ee9-4890-ad5e-9adf4ce57646"},"outputs":[{"output_type":"stream","name":"stdout","text":["['label', 'image']\n"]}],"source":["import os\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import pandas as pd\n","import random\n","import matplotlib.image as img\n","from PIL import Image\n","import cv2\n","from pathlib import Path\n","from typing import Dict, List, Tuple\n","import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","from torch.utils.data import Dataset, DataLoader\n","import timm\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import classification_report\n","from tqdm import tqdm\n","\n","os.environ[\"CUDA_LAUNCH_BLOCKING\"] = \"1\"\n","random_seed = 42\n","random.seed(random_seed)\n","np.random.seed(random_seed)\n","data = np.load(\"/content/drive/MyDrive/Colab Notebooks/Resize_Dataset.npz\")\n","print(data.files)"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":34056,"status":"ok","timestamp":1754272111629,"user":{"displayName":"Yuan","userId":"17899166706048601251"},"user_tz":-480},"id":"JCnPeVo6uLg9","outputId":"d5255e04-1a6f-44ea-9342-a95fdc96ab4f"},"outputs":[{"output_type":"stream","name":"stdout","text":["訓練集筆數: 79831\n","驗證集筆數: 17106\n","測試集筆數: 17108\n","(79831, 65, 65)\n","0  1  2  3  4  5  6  7\n","1  0  1  0  0  0  1  0    4171\n","0  1  1  0  0  0  1  0    2162\n","1  0  0  0  1  0  0  0    2162\n","0  1  1  0  1  0  1  0    2159\n","1  0  0  0  0  0  0  0    2149\n","0  1  0  0  1  0  1  0    2147\n","            0  0  1  0    2146\n","1  0  0  0  0  0  1  0    2136\n","0  0  0  1  0  0  0  0    2118\n","   1  1  0  0  0  0  0    2117\n","1  0  1  0  0  0  0  0    2113\n","0  0  1  0  0  0  1  0    2111\n","   1  0  0  0  0  0  0    2108\n","         1  0  0  1  0    2106\n","         0  1  0  0  0    2104\n","   0  0  1  1  0  0  0    2102\n","            0  0  1  0    2101\n","1  0  0  1  0  0  0  0    2099\n","      1  0  1  0  0  0    2099\n","      0  0  1  0  1  0    2099\n","0  0  0  0  0  0  1  0    2098\n","   1  0  1  1  0  0  0    2096\n","      1  0  1  0  0  0    2093\n","   0  0  0  1  0  0  0    2092\n","      1  0  1  0  1  0    2091\n","   1  0  1  1  0  1  0    2090\n","   0  1  0  1  0  0  0    2088\n","            0  0  0  0    2088\n","1  0  0  1  1  0  0  0    2087\n","                  1  0    2076\n","0  0  0  0  0  0  0  0    2068\n","   1  0  1  0  0  0  0    2062\n","1  0  0  1  0  0  1  0    2051\n","      1  0  1  0  1  0    2046\n","0  0  0  0  1  0  1  0    2042\n","         1  1  0  1  0    2040\n","         0  0  0  0  1    1790\n","               1  0  0     324\n","Name: count, dtype: int64\n"]}],"source":["arrays = data['image']\n","label = data['label']\n","# print(arrays.shape)\n","arrays = np.reshape(arrays,(-1,65*65))\n","combine_array = np.concatenate([label,arrays],axis=1)\n","# print(combine_array.shape)\n","\n","np.random.shuffle(combine_array)\n","\n","# 設定每個集合的大小\n","total_rows = combine_array.shape[0]  # 總行數\n","train_size = int(total_rows * 0.7)  # 訓練集大小 (70%)\n","val_size = int(total_rows * 0.15)   # 驗證集大小 (15%)\n","test_size = total_rows - train_size - val_size  # 測試集大小 (剩下的行數)\n","\n","# 分割數據集\n","train_set = combine_array[:train_size]  # 前 70% 為訓練集\n","val_set = combine_array[train_size:train_size + val_size]  # 接下來的 15% 為驗證集\n","test_set = combine_array[train_size + val_size:]  # 剩下的 15% 為測試集\n","\n","print(\"訓練集筆數:\", train_set.shape[0])\n","print(\"驗證集筆數:\", val_set.shape[0])\n","print(\"測試集筆數:\", test_set.shape[0])\n","\n","train_X = train_set[:,8: ]\n","train_Y = train_set[:, :8]\n","val_X = val_set[:,8: ]\n","val_Y = val_set[:, :8]\n","test_X = test_set[:,8: ]\n","test_Y = test_set[:, :8]\n","\n","train_X = np.reshape(train_X,(-1,65,65))\n","val_X = np.reshape(val_X,(-1,65,65))\n","test_X = np.reshape(test_X,(-1,65,65))\n","\n","print(train_X.shape)\n","\n","# 看各 label 個數\n","print(pd.DataFrame(train_Y).value_counts())\n","\n","def decode_to_38bit(input_ndarray):\n","    mapping = {\n","        \"00000000\": 0,\n","        \"10000000\": 1,\n","        \"01000000\": 2,\n","        \"00100000\": 3,\n","        \"00010000\": 4,\n","        \"00001000\": 5,\n","        \"00000100\": 6,\n","        \"00000010\": 7,\n","        \"00000001\": 8,\n","        \"10100000\": 9,\n","        \"10010000\": 10,\n","        \"10001000\": 11,\n","        \"10000010\": 12,\n","        \"01100000\": 13,\n","        \"01010000\": 14,\n","        \"01001000\": 15,\n","        \"01000010\": 16,\n","        \"00101000\": 17,\n","        \"00100010\": 18,\n","        \"00011000\": 19,\n","        \"00010010\": 20,\n","        \"00001010\": 21,\n","        \"10101000\": 22,\n","        \"10100010\": 23,\n","        \"10011000\": 24,\n","        \"10010010\": 25,\n","        \"10001010\": 26,\n","        \"01101000\": 27,\n","        \"01100010\": 28,\n","        \"01011000\": 29,\n","        \"01010010\": 30,\n","        \"01001010\": 31,\n","        \"00101010\": 32,\n","        \"00011010\": 33,\n","        \"10101010\": 34,\n","        \"10011010\": 35,\n","        \"01101010\": 36,\n","        \"01011010\": 37\n","    }\n","    n = input_ndarray.shape[0]  # 行數\n","    decoded_ndarray = np.zeros(n, dtype=int)\n","    # 逐行解碼\n","    for i, row in enumerate(input_ndarray):\n","        # 將每一行轉換為字典的鍵，並獲得對應的索引\n","        input_8bit = ''.join(row.astype(str))  # 把整數轉為字串並拼接\n","        number = mapping[input_8bit]  # 獲取對應的數字索引\n","        decoded_ndarray[i] = number\n","    return decoded_ndarray\n","\n","# label 轉成 one hot encoding\n","train_Y = decode_to_38bit(train_Y)\n","val_Y = decode_to_38bit(val_Y)\n","test_Y = decode_to_38bit(test_Y)"]},{"cell_type":"code","execution_count":4,"metadata":{"id":"dJc3fptuuLhG","executionInfo":{"status":"ok","timestamp":1754272111634,"user_tz":-480,"elapsed":2,"user":{"displayName":"Yuan","userId":"17899166706048601251"}}},"outputs":[],"source":["# 自定義一個簡單的 Dataset 類\n","class MyDataset(Dataset):\n","    def __init__(self,mydata,mylabel):\n","        # 定義數據\n","        self.data = mydata\n","        self.labels = mylabel\n","\n","    def __len__(self):\n","        # 返回數據集的大小\n","        return len(self.data)\n","\n","    def __getitem__(self, index):\n","        # 返回指定 index 的數據和標籤\n","        return self.data[index], self.labels[index]\n","\n","# --- 步驟 1: 定義一個更穩健的 CategoricalCNN 模型 ---\n","# 這個版本能更可靠地自動獲取骨幹網路的輸出特徵數量\n","class CategoricalCNN(nn.Module):\n","    \"\"\"\n","    專為二維類別資料（如晶圓圖）設計的 CNN。\n","    它使用嵌入層從類別創建特徵向量，然後將其饋送到標準的 CNN 骨幹網路。\n","    \"\"\"\n","    def __init__(self, num_classes, num_categories=3, embedding_dim=16, backbone_name='efficientnet_b0'):\n","        super().__init__()\n","        self.num_classes = num_classes\n","        self.num_categories = num_categories\n","        self.embedding_dim = embedding_dim\n","\n","        # 1. 嵌入層，用於學習晶圓圖中各個類別的向量表示\n","        # 輸入是類別索引 (0, 1, 2)，輸出是密集向量\n","        self.embedding = nn.Embedding(num_embeddings=num_categories, embedding_dim=embedding_dim)\n","\n","        # 2. 從 timm 中選擇一個現代化的 CNN 骨幹網路\n","        self.backbone = timm.create_model(\n","            backbone_name,\n","            pretrained=False,        # 盡可能使用預訓練權重\n","            features_only=True,     # 我們只需要特徵提取部分\n","            in_chans=embedding_dim  # 關鍵：將骨幹網路的輸入通道數修改為嵌入維度\n","        )\n","\n","        # 3. 使用 timm 的 feature_info 來安全地獲取骨幹網路的輸出特徵維度\n","        num_features = self.backbone.feature_info.channels(-1)\n","\n","        # 4. 分類頭\n","        self.global_pool = nn.AdaptiveAvgPool2d(1)\n","        self.classifier = nn.Linear(num_features, num_classes)\n","\n","    def forward(self, x):\n","        # x 的輸入形狀: (batch_size, height, width)，其值為整數類別\n","        # `embedding` 層需要 LongTensor\n","        x = x.long()\n","\n","        # 通過嵌入層處理\n","        # 輸出形狀: (batch_size, height, width, embedding_dim)\n","        embedded_x = self.embedding(x)\n","\n","        # 調整維度以匹配 CNN 的輸入格式 (N, C, H, W)\n","        # 輸出形狀: (batch_size, embedding_dim, height, width)\n","        embedded_x = embedded_x.permute(0, 3, 1, 2)\n","\n","        # 從骨幹網路提取特徵\n","        # features_only=True 的輸出是一個包含不同階段特徵圖的列表\n","        features = self.backbone(embedded_x)\n","\n","        # 我們使用最後一個、包含最豐富資訊的特徵圖進行分類\n","        last_feature_map = features[-1]\n","\n","        # 應用全域池化和最終的分類層\n","        pooled_features = self.global_pool(last_feature_map).flatten(1)\n","        output = self.classifier(pooled_features)\n","\n","        return output"]},{"cell_type":"code","source":["# 將原始的 one-hot 編碼資料賦予新的變數名稱，以符合後續程式碼的命名\n","train_Y_onehot = train_Y\n","val_Y_onehot = val_Y\n","test_Y_onehot = test_Y\n","\n","# 使用 OpenCV 的 resize 函數進行調整\n","def resize_ndarray(input_array, target_height, target_width):\n","    return cv2.resize(input_array, (target_width, target_height), interpolation=cv2.INTER_NEAREST)\n","\n","IMG_SIZE = 65\n","print(f\"正在將晶圓圖大小從 (52, 52) 調整為 ({IMG_SIZE}, {IMG_SIZE})...\")\n","resized_train_X = np.array([resize_ndarray(img, IMG_SIZE, IMG_SIZE) for img in tqdm(train_X, desc=\"調整訓練集大小\")])\n","resized_val_X = np.array([resize_ndarray(img, IMG_SIZE, IMG_SIZE) for img in tqdm(val_X, desc=\"調整驗證集大小\")])\n","resized_test_X = np.array([resize_ndarray(img, IMG_SIZE, IMG_SIZE) for img in tqdm(test_X, desc=\"調整測試集大小\")])\n","print(\"大小調整完成。\")\n","\n","# --- 步驟 3: 更新 Dataset, Config 和訓練函式 ---\n","# 更新後的 Dataset，確保返回正確的資料類型\n","class WaferMapDataset(Dataset):\n","    def __init__(self, mydata, mylabel):\n","        # 將資料轉換為 LongTensor 以便嵌入層使用\n","        self.data = torch.from_numpy(mydata).long()\n","        # 將標籤轉換為 LongTensor 以便損失函式使用\n","        self.labels = torch.from_numpy(mylabel).long()\n","\n","    def __len__(self):\n","        return len(self.data)\n","\n","    def __getitem__(self, index):\n","        # 返回指定 index 的數據和標籤\n","        return self.data[index], self.labels[index]\n","\n","# 更新後的 Config\n","class Config:\n","    def __init__(self):\n","        self.seed = 42\n","        self.image_size = 52\n","        self.batch_size = 16  # 如果記憶體不足 (CUDA out of memory)，可以降低此值\n","        self.num_workers = 2\n","        self.num_epochs = 30\n","        self.learning_rate = 5e-5\n","        # 建議從一個較小的模型開始，以加快實驗速度\n","        self.model_name = 'mobilenet_edgetpu_v2_l'\n","        self.device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n","        self.output_dir = Path(\"/content/drive/MyDrive/Colab Notebooks/save\")\n","        self.model_path = self.output_dir / f\"{self.model_name}.pth\"\n","\n","        # CategoricalCNN 所需的新參數\n","        # 您的晶圓圖資料中的獨特值數量 (例如 0, 1, 2)\n","        # 如果不確定，可以執行 np.unique(train_X) 來檢查\n","        self.num_categories = 38\n","        # 學習到的類別向量維度，16 是一個不錯的起點\n","        self.embedding_dim = 16\n","\n","        # 類別和標籤\n","        self.num_classes = 38\n","        self.categories = [str(i) for i in range(self.num_classes)] # 用於分類報告\n","\n","# 您的 train_epoch 和 validate 函式無需修改，這裡為了完整性而包含進來\n","def train_epoch(model, train_loader, criterion, optimizer, device, epoch):\n","    model.train()\n","    total_loss = 0\n","    with tqdm(train_loader, desc=f'Epoch {epoch + 1} - 訓練中') as pbar:\n","        for images, labels in pbar:\n","            images, labels = images.to(device), labels.to(device)\n","            optimizer.zero_grad()\n","            outputs = model(images)\n","            loss = criterion(outputs, labels)\n","            loss.backward()\n","            optimizer.step()\n","            total_loss += loss.item()\n","            pbar.set_postfix({'loss': f'{loss.item():.4f}'})\n","    return total_loss / len(train_loader)\n","\n","\n","@torch.no_grad()\n","def validate(model, val_loader, criterion, device, desc='驗證中'):\n","    model.eval()\n","    total_loss = 0\n","    correct = 0\n","    total = 0\n","    with tqdm(val_loader, desc=desc) as pbar:\n","        for images, labels in pbar:\n","            images, labels = images.to(device), labels.to(device)\n","            outputs = model(images)\n","            loss = criterion(outputs, labels)\n","            total_loss += loss.item()\n","            _, predicted = torch.max(outputs.data, 1)\n","            total += labels.size(0)\n","            correct += (predicted == labels).sum().item()\n","            accuracy = 100 * correct / total\n","            pbar.set_postfix({'loss': f'{loss.item():.4f}', 'accuracy': f'{accuracy:.2f}%'})\n","    return total_loss / len(val_loader), 100 * correct / total\n","\n","# --- 步驟 4: 更新主函式以使用新模型和資料 ---\n","def main():\n","    config = Config()\n","    config.output_dir.mkdir(exist_ok=True)\n","    print(f\"使用設備: {config.device}\")\n","    print(f\"模型將儲存至: {config.model_path}\")\n","\n","    # 設定隨機種子以確保可重現性\n","    torch.manual_seed(config.seed)\n","    np.random.seed(config.seed)\n","    random.seed(config.seed)\n","\n","    # 初始化 Dataset 和 DataLoader\n","    train_dataset = WaferMapDataset(resized_train_X, train_Y)\n","    train_loader = DataLoader(train_dataset, batch_size=config.batch_size, shuffle=True, num_workers=config.num_workers)\n","\n","    val_dataset = WaferMapDataset(resized_val_X, val_Y)\n","    val_loader = DataLoader(val_dataset, batch_size=config.batch_size, num_workers=config.num_workers)\n","\n","    test_dataset = WaferMapDataset(resized_test_X, test_Y)\n","    test_loader = DataLoader(test_dataset, batch_size=config.batch_size, num_workers=config.num_workers)\n","\n","    # --- 關鍵變更：實例化新的 CategoricalCNN 模型 ---\n","    model = CategoricalCNN(\n","        num_classes=config.num_classes,\n","        num_categories=config.num_categories,\n","        embedding_dim=config.embedding_dim,\n","        backbone_name=config.model_name\n","    ).to(config.device)\n","\n","    criterion = nn.CrossEntropyLoss()\n","    optimizer = optim.AdamW(model.parameters(), lr=config.learning_rate)\n","    scheduler = optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max=config.num_epochs)\n","\n","    model.load_state_dict(torch.load(config.model_path))\n","\n","    best_val_acc = 0\n","    for epoch in range(config.num_epochs):\n","        train_loss = train_epoch(model, train_loader, criterion, optimizer, config.device, epoch)\n","        val_loss, val_acc = validate(model, val_loader, criterion, config.device, desc=f'Epoch {epoch + 1} - 驗證中')\n","        scheduler.step()\n","\n","        print(f'\\nEpoch {epoch + 1}:')\n","        print(f'訓練損失: {train_loss:.4f}')\n","        print(f'驗證損失: {val_loss:.4f}, 驗證準確率: {val_acc:.2f}%')\n","\n","        if val_acc > best_val_acc:\n","            best_val_acc = val_acc\n","            torch.save(model.state_dict(), config.model_path)\n","            print(f'儲存最佳模型，驗證準確率: {val_acc:.2f}%')\n","\n","    print(\"\\n在測試集上評估最佳模型...\")\n","    model.load_state_dict(torch.load(config.model_path))\n","    test_loss, test_acc = validate(model, test_loader, criterion, config.device, desc='測試中')\n","    print(f'\\n測試準確率: {test_acc:.2f}%')\n","\n","    print(\"\\n正在生成分類報告...\")\n","    model.eval()\n","    all_preds, all_labels = [], []\n","    with torch.no_grad():\n","        for images, labels in tqdm(test_loader, desc='預測中'):\n","            images = images.to(config.device)\n","            outputs = model(images)\n","            _, predicted = torch.max(outputs.data, 1)\n","            all_preds.extend(predicted.cpu().numpy())\n","            all_labels.extend(labels.numpy())\n","\n","    report = classification_report(all_labels, all_preds, target_names=config.categories, digits=4)\n","    print('\\n分類報告:')\n","    print(report)\n","\n","    with open(config.output_dir / 'classification_report.txt', 'w') as f:\n","        f.write(report)\n","\n","main()"],"metadata":{"id":"OP6pwHxJ84Po","colab":{"base_uri":"https://localhost:8080/"},"outputId":"6171b58b-af12-44ed-8560-aeee474f9496","executionInfo":{"status":"ok","timestamp":1754281999034,"user_tz":-480,"elapsed":859146,"user":{"displayName":"Yuan","userId":"17899166706048601251"}}},"execution_count":5,"outputs":[{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["正在將晶圓圖大小從 (52, 52) 調整為 (65, 65)...\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["調整訓練集大小: 100%|██████████| 79831/79831 [00:02<00:00, 28667.50it/s]\n","調整驗證集大小: 100%|██████████| 17106/17106 [00:00<00:00, 128501.69it/s]\n","調整測試集大小: 100%|██████████| 17108/17108 [00:00<00:00, 132555.53it/s]\n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["大小調整完成。\n","使用設備: cuda\n","模型將儲存至: /content/drive/MyDrive/Colab Notebooks/save/mobilenet_edgetpu_v2_l.pth\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["Epoch 1 - 訓練中: 100%|██████████| 4990/4990 [05:02<00:00, 16.51it/s, loss=0.0048]\n","Epoch 1 - 驗證中: 100%|██████████| 1070/1070 [00:25<00:00, 41.45it/s, loss=0.0005, accuracy=93.26%]\n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["\n","Epoch 1:\n","訓練損失: 0.0235\n","驗證損失: 0.3964, 驗證準確率: 93.26%\n","儲存最佳模型，驗證準確率: 93.26%\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["Epoch 2 - 訓練中: 100%|██████████| 4990/4990 [04:59<00:00, 16.64it/s, loss=0.0112]\n","Epoch 2 - 驗證中: 100%|██████████| 1070/1070 [00:24<00:00, 43.36it/s, loss=0.0009, accuracy=93.67%]\n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["\n","Epoch 2:\n","訓練損失: 0.0248\n","驗證損失: 0.3528, 驗證準確率: 93.67%\n","儲存最佳模型，驗證準確率: 93.67%\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["Epoch 3 - 訓練中: 100%|██████████| 4990/4990 [04:57<00:00, 16.78it/s, loss=0.0010]\n","Epoch 3 - 驗證中: 100%|██████████| 1070/1070 [00:24<00:00, 42.97it/s, loss=0.0058, accuracy=93.13%]\n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["\n","Epoch 3:\n","訓練損失: 0.0250\n","驗證損失: 0.3515, 驗證準確率: 93.13%\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["Epoch 4 - 訓練中: 100%|██████████| 4990/4990 [05:00<00:00, 16.62it/s, loss=0.0003]\n","Epoch 4 - 驗證中: 100%|██████████| 1070/1070 [00:24<00:00, 43.47it/s, loss=0.2614, accuracy=93.88%]\n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["\n","Epoch 4:\n","訓練損失: 0.0239\n","驗證損失: 0.3240, 驗證準確率: 93.88%\n","儲存最佳模型，驗證準確率: 93.88%\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["Epoch 5 - 訓練中: 100%|██████████| 4990/4990 [05:07<00:00, 16.22it/s, loss=0.0062]\n","Epoch 5 - 驗證中: 100%|██████████| 1070/1070 [00:26<00:00, 39.78it/s, loss=1.0661, accuracy=93.66%]\n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["\n","Epoch 5:\n","訓練損失: 0.0229\n","驗證損失: 0.3279, 驗證準確率: 93.66%\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["Epoch 6 - 訓練中: 100%|██████████| 4990/4990 [05:05<00:00, 16.34it/s, loss=0.0015]\n","Epoch 6 - 驗證中: 100%|██████████| 1070/1070 [00:24<00:00, 44.51it/s, loss=0.0006, accuracy=93.39%]\n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["\n","Epoch 6:\n","訓練損失: 0.0192\n","驗證損失: 0.3369, 驗證準確率: 93.39%\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["Epoch 7 - 訓練中: 100%|██████████| 4990/4990 [05:01<00:00, 16.54it/s, loss=0.9587]\n","Epoch 7 - 驗證中: 100%|██████████| 1070/1070 [00:24<00:00, 43.31it/s, loss=0.8441, accuracy=93.51%]\n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["\n","Epoch 7:\n","訓練損失: 0.0212\n","驗證損失: 0.3228, 驗證準確率: 93.51%\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["Epoch 8 - 訓練中: 100%|██████████| 4990/4990 [05:03<00:00, 16.46it/s, loss=0.0009]\n","Epoch 8 - 驗證中: 100%|██████████| 1070/1070 [00:24<00:00, 42.98it/s, loss=0.0134, accuracy=94.05%]\n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["\n","Epoch 8:\n","訓練損失: 0.0177\n","驗證損失: 0.3193, 驗證準確率: 94.05%\n","儲存最佳模型，驗證準確率: 94.05%\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["Epoch 9 - 訓練中: 100%|██████████| 4990/4990 [05:03<00:00, 16.45it/s, loss=0.0005]\n","Epoch 9 - 驗證中: 100%|██████████| 1070/1070 [00:24<00:00, 44.15it/s, loss=0.3153, accuracy=93.87%]\n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["\n","Epoch 9:\n","訓練損失: 0.0156\n","驗證損失: 0.3275, 驗證準確率: 93.87%\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["Epoch 10 - 訓練中: 100%|██████████| 4990/4990 [04:59<00:00, 16.67it/s, loss=0.0003]\n","Epoch 10 - 驗證中: 100%|██████████| 1070/1070 [00:25<00:00, 42.65it/s, loss=0.0027, accuracy=93.83%]\n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["\n","Epoch 10:\n","訓練損失: 0.0141\n","驗證損失: 0.3510, 驗證準確率: 93.83%\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["Epoch 11 - 訓練中: 100%|██████████| 4990/4990 [05:06<00:00, 16.26it/s, loss=0.0050]\n","Epoch 11 - 驗證中: 100%|██████████| 1070/1070 [00:24<00:00, 43.32it/s, loss=0.0002, accuracy=94.08%]\n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["\n","Epoch 11:\n","訓練損失: 0.0135\n","驗證損失: 0.3222, 驗證準確率: 94.08%\n","儲存最佳模型，驗證準確率: 94.08%\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["Epoch 12 - 訓練中: 100%|██████████| 4990/4990 [04:59<00:00, 16.68it/s, loss=0.0084]\n","Epoch 12 - 驗證中: 100%|██████████| 1070/1070 [00:24<00:00, 42.82it/s, loss=0.0012, accuracy=94.10%]\n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["\n","Epoch 12:\n","訓練損失: 0.0111\n","驗證損失: 0.3312, 驗證準確率: 94.10%\n","儲存最佳模型，驗證準確率: 94.10%\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["Epoch 13 - 訓練中: 100%|██████████| 4990/4990 [05:05<00:00, 16.32it/s, loss=0.0008]\n","Epoch 13 - 驗證中: 100%|██████████| 1070/1070 [00:24<00:00, 42.86it/s, loss=0.0128, accuracy=94.12%]\n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["\n","Epoch 13:\n","訓練損失: 0.0102\n","驗證損失: 0.3185, 驗證準確率: 94.12%\n","儲存最佳模型，驗證準確率: 94.12%\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["Epoch 14 - 訓練中: 100%|██████████| 4990/4990 [05:05<00:00, 16.36it/s, loss=0.0046]\n","Epoch 14 - 驗證中: 100%|██████████| 1070/1070 [00:25<00:00, 42.42it/s, loss=0.0007, accuracy=94.24%]\n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["\n","Epoch 14:\n","訓練損失: 0.0076\n","驗證損失: 0.3386, 驗證準確率: 94.24%\n","儲存最佳模型，驗證準確率: 94.24%\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["Epoch 15 - 訓練中: 100%|██████████| 4990/4990 [05:03<00:00, 16.44it/s, loss=0.0031]\n","Epoch 15 - 驗證中: 100%|██████████| 1070/1070 [00:24<00:00, 43.53it/s, loss=0.0003, accuracy=94.13%]\n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["\n","Epoch 15:\n","訓練損失: 0.0068\n","驗證損失: 0.3486, 驗證準確率: 94.13%\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["Epoch 16 - 訓練中: 100%|██████████| 4990/4990 [04:57<00:00, 16.76it/s, loss=0.2404]\n","Epoch 16 - 驗證中: 100%|██████████| 1070/1070 [00:24<00:00, 43.76it/s, loss=0.0011, accuracy=94.21%]\n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["\n","Epoch 16:\n","訓練損失: 0.0062\n","驗證損失: 0.3404, 驗證準確率: 94.21%\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["Epoch 17 - 訓練中: 100%|██████████| 4990/4990 [05:01<00:00, 16.56it/s, loss=0.0002]\n","Epoch 17 - 驗證中: 100%|██████████| 1070/1070 [00:24<00:00, 44.22it/s, loss=0.0006, accuracy=94.38%]\n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["\n","Epoch 17:\n","訓練損失: 0.0045\n","驗證損失: 0.3256, 驗證準確率: 94.38%\n","儲存最佳模型，驗證準確率: 94.38%\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["Epoch 18 - 訓練中: 100%|██████████| 4990/4990 [04:57<00:00, 16.79it/s, loss=0.0003]\n","Epoch 18 - 驗證中: 100%|██████████| 1070/1070 [00:24<00:00, 43.76it/s, loss=0.0005, accuracy=94.47%]\n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["\n","Epoch 18:\n","訓練損失: 0.0037\n","驗證損失: 0.3413, 驗證準確率: 94.47%\n","儲存最佳模型，驗證準確率: 94.47%\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["Epoch 19 - 訓練中: 100%|██████████| 4990/4990 [05:00<00:00, 16.61it/s, loss=0.0095]\n","Epoch 19 - 驗證中: 100%|██████████| 1070/1070 [00:24<00:00, 43.20it/s, loss=0.0060, accuracy=94.33%]\n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["\n","Epoch 19:\n","訓練損失: 0.0027\n","驗證損失: 0.3650, 驗證準確率: 94.33%\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["Epoch 20 - 訓練中: 100%|██████████| 4990/4990 [05:00<00:00, 16.59it/s, loss=0.0004]\n","Epoch 20 - 驗證中: 100%|██████████| 1070/1070 [00:25<00:00, 42.73it/s, loss=0.0004, accuracy=94.49%]\n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["\n","Epoch 20:\n","訓練損失: 0.0016\n","驗證損失: 0.3600, 驗證準確率: 94.49%\n","儲存最佳模型，驗證準確率: 94.49%\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["Epoch 21 - 訓練中: 100%|██████████| 4990/4990 [04:58<00:00, 16.73it/s, loss=0.0001]\n","Epoch 21 - 驗證中: 100%|██████████| 1070/1070 [00:24<00:00, 43.32it/s, loss=0.0001, accuracy=94.59%]\n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["\n","Epoch 21:\n","訓練損失: 0.0013\n","驗證損失: 0.3557, 驗證準確率: 94.59%\n","儲存最佳模型，驗證準確率: 94.59%\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["Epoch 22 - 訓練中: 100%|██████████| 4990/4990 [04:58<00:00, 16.73it/s, loss=0.0002]\n","Epoch 22 - 驗證中: 100%|██████████| 1070/1070 [00:24<00:00, 43.27it/s, loss=0.0004, accuracy=94.47%]\n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["\n","Epoch 22:\n","訓練損失: 0.0009\n","驗證損失: 0.3726, 驗證準確率: 94.47%\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["Epoch 23 - 訓練中: 100%|██████████| 4990/4990 [05:00<00:00, 16.63it/s, loss=0.0031]\n","Epoch 23 - 驗證中: 100%|██████████| 1070/1070 [00:24<00:00, 43.06it/s, loss=0.0000, accuracy=94.60%]\n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["\n","Epoch 23:\n","訓練損失: 0.0004\n","驗證損失: 0.3822, 驗證準確率: 94.60%\n","儲存最佳模型，驗證準確率: 94.60%\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["Epoch 24 - 訓練中: 100%|██████████| 4990/4990 [05:01<00:00, 16.57it/s, loss=0.0007]\n","Epoch 24 - 驗證中: 100%|██████████| 1070/1070 [00:24<00:00, 42.97it/s, loss=0.0000, accuracy=94.84%]\n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["\n","Epoch 24:\n","訓練損失: 0.0003\n","驗證損失: 0.3570, 驗證準確率: 94.84%\n","儲存最佳模型，驗證準確率: 94.84%\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["Epoch 25 - 訓練中: 100%|██████████| 4990/4990 [05:02<00:00, 16.52it/s, loss=0.0001]\n","Epoch 25 - 驗證中: 100%|██████████| 1070/1070 [00:24<00:00, 42.88it/s, loss=0.0000, accuracy=94.66%]\n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["\n","Epoch 25:\n","訓練損失: 0.0001\n","驗證損失: 0.3701, 驗證準確率: 94.66%\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["Epoch 26 - 訓練中: 100%|██████████| 4990/4990 [05:08<00:00, 16.16it/s, loss=0.0000]\n","Epoch 26 - 驗證中: 100%|██████████| 1070/1070 [00:26<00:00, 41.04it/s, loss=0.0001, accuracy=94.76%]\n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["\n","Epoch 26:\n","訓練損失: 0.0001\n","驗證損失: 0.3857, 驗證準確率: 94.76%\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["Epoch 27 - 訓練中: 100%|██████████| 4990/4990 [05:12<00:00, 15.98it/s, loss=0.0000]\n","Epoch 27 - 驗證中: 100%|██████████| 1070/1070 [00:25<00:00, 41.56it/s, loss=0.0001, accuracy=94.80%]\n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["\n","Epoch 27:\n","訓練損失: 0.0000\n","驗證損失: 0.3862, 驗證準確率: 94.80%\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 28 - 訓練中: 100%|██████████| 4990/4990 [05:03<00:00, 16.46it/s, loss=0.0001]\n","Epoch 28 - 驗證中: 100%|██████████| 1070/1070 [00:27<00:00, 39.46it/s, loss=0.0001, accuracy=94.85%]\n"]},{"output_type":"stream","name":"stdout","text":["\n","Epoch 28:\n","訓練損失: 0.0000\n","驗證損失: 0.3899, 驗證準確率: 94.85%\n","儲存最佳模型，驗證準確率: 94.85%\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 29 - 訓練中: 100%|██████████| 4990/4990 [05:04<00:00, 16.40it/s, loss=0.0000]\n","Epoch 29 - 驗證中: 100%|██████████| 1070/1070 [00:25<00:00, 41.78it/s, loss=0.0000, accuracy=94.87%]\n"]},{"output_type":"stream","name":"stdout","text":["\n","Epoch 29:\n","訓練損失: 0.0000\n","驗證損失: 0.3956, 驗證準確率: 94.87%\n","儲存最佳模型，驗證準確率: 94.87%\n"]},{"output_type":"stream","name":"stderr","text":["Epoch 30 - 訓練中: 100%|██████████| 4990/4990 [05:05<00:00, 16.31it/s, loss=0.0006]\n","Epoch 30 - 驗證中: 100%|██████████| 1070/1070 [00:25<00:00, 42.55it/s, loss=0.0000, accuracy=94.83%]\n"]},{"output_type":"stream","name":"stdout","text":["\n","Epoch 30:\n","訓練損失: 0.0000\n","驗證損失: 0.3938, 驗證準確率: 94.83%\n","\n","在測試集上評估最佳模型...\n"]},{"output_type":"stream","name":"stderr","text":["測試中: 100%|██████████| 1070/1070 [00:25<00:00, 41.33it/s, loss=0.0000, accuracy=94.91%]\n"]},{"output_type":"stream","name":"stdout","text":["\n","測試準確率: 94.91%\n","\n","正在生成分類報告...\n"]},{"output_type":"stream","name":"stderr","text":["預測中: 100%|██████████| 1070/1070 [00:21<00:00, 49.23it/s]\n"]},{"output_type":"stream","name":"stdout","text":["\n","分類報告:\n","              precision    recall  f1-score   support\n","\n","           0     1.0000    1.0000    1.0000       447\n","           1     0.9587    0.9735    0.9660       453\n","           2     0.9400    0.9734    0.9564       451\n","           3     0.9485    0.9850    0.9664       467\n","           4     0.9441    0.9724    0.9580       434\n","           5     0.9319    0.9566    0.9441       415\n","           6     0.9655    0.9655    0.9655        58\n","           7     0.9640    0.9891    0.9764       460\n","           8     0.9950    0.9877    0.9914       407\n","           9     0.9517    0.9303    0.9409       445\n","          10     0.9384    0.9693    0.9536       424\n","          11     0.9474    0.9362    0.9417       423\n","          12     0.9189    0.9779    0.9475       452\n","          13     0.9279    0.9196    0.9238       448\n","          14     0.9337    0.9616    0.9475       469\n","          15     0.9387    0.9149    0.9267       435\n","          16     0.9378    0.9701    0.9537       435\n","          17     0.9621    0.9251    0.9432       467\n","          18     0.9621    0.9333    0.9475       435\n","          19     0.9323    0.9531    0.9426       448\n","          20     0.9344    0.9516    0.9429       434\n","          21     0.9551    0.9411    0.9480       475\n","          22     0.9353    0.9214    0.9283       471\n","          23     0.9712    0.9529    0.9620       956\n","          24     0.9249    0.9501    0.9374       441\n","          25     0.9419    0.9671    0.9543       486\n","          26     0.9396    0.9435    0.9415       478\n","          27     0.9854    0.9713    0.9783       487\n","          28     0.9263    0.8980    0.9119       392\n","          29     0.9800    0.9714    0.9757       455\n","          30     0.9199    0.9512    0.9353       471\n","          31     0.9253    0.9121    0.9187       421\n","          32     0.9446    0.9322    0.9383       457\n","          33     0.9501    0.9182    0.9339       477\n","          34     0.9528    0.8908    0.9207       476\n","          35     0.9480    0.9229    0.9353       454\n","          36     0.9808    0.9203    0.9496       389\n","          37     0.9523    0.9614    0.9568       415\n","\n","    accuracy                         0.9491     17108\n","   macro avg     0.9491    0.9493    0.9490     17108\n","weighted avg     0.9494    0.9491    0.9491     17108\n","\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"GZSxxcAkbT16","executionInfo":{"status":"ok","timestamp":1754281999042,"user_tz":-480,"elapsed":0,"user":{"displayName":"Yuan","userId":"17899166706048601251"}}},"execution_count":5,"outputs":[]}],"metadata":{"colab":{"provenance":[{"file_id":"1wpNHuvE_RWSNuDqoO3ZrorEyPsuggtoi","timestamp":1754182936065},{"file_id":"181jHzamQz0k-kqoVZCetFyiNIMK-zxUw","timestamp":1754027522867},{"file_id":"1yK55RjrsDh5zq7QmdsdVGfKITO35PTZv","timestamp":1753921800975},{"file_id":"https://storage.googleapis.com/kaggle-colab-exported-notebooks/syuank/wafer-map-recognition.e8d3473a-adc3-4016-b83c-cceb82ea5d75.ipynb?X-Goog-Algorithm=GOOG4-RSA-SHA256&X-Goog-Credential=gcp-kaggle-com%40kaggle-161607.iam.gserviceaccount.com/20250723/auto/storage/goog4_request&X-Goog-Date=20250723T003935Z&X-Goog-Expires=259200&X-Goog-SignedHeaders=host&X-Goog-Signature=232ecdaae2d527afa2f37c86e576a72b69a689d8653b905040419e279c2543110388877455e792a9cc4f80940eb9b88e9d1fdc8c799f91d2ac09bf75b0aa6069ed54091f10f94e2b49cb90c0b13eccd9d7d5ef127c41f66cf3ea341f726341cd98ec448d443a3b93e179b1a56ce03aa3a6460f0ec33158eee514a1556bb17a2e93d6a12d24798ba4807595f3762e54d87e814b3f119f49cb0bc5936b6a2bfd8498883aa3d08b79af7d5fa285df08f9fddabcdf18399a9bf86494f2ba19f421b4fc2f020c98d86dae9ac5a89028d6817b3e9b4a0e31d62bdfacd59225de6ee7ccab65fd8a927f65dc0dc8a924e0f28ce508d1b8dd9a915cf96f1948b5203dacd7","timestamp":1753231182989}],"gpuType":"T4"},"kaggle":{"accelerator":"gpu","dataSources":[{"datasetId":899128,"sourceId":10404507,"sourceType":"datasetVersion"}],"dockerImageVersionId":30458,"isGpuEnabled":true,"isInternetEnabled":false,"language":"python","sourceType":"notebook"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.12"},"accelerator":"GPU"},"nbformat":4,"nbformat_minor":0}